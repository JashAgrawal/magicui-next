'use client';

import React, { useState } from 'react';
import { MagicUI } from '@/components/magic-ui/MagicUI'; // Adjust path as necessary
import { MagicUIProvider } from '@/contexts/MagicUIContext'; // Adjust path as necessary

const initialTestData = [
  { productName: "Laptop Pro X", price: "1499.99", imageUrl: "/placeholder-images/laptop.jpg", imageAltText: "A modern laptop" },
  { productName: "Wireless Ergo Mouse", price: "79.50", imageUrl: "https://example.com/nonexistent-mouse.jpg", imageAltText: "An ergonomic wireless mouse (image will fail)" }, // Failing URL
  { productName: "Mechanical Keyboard RGB", price: "125.00", imageUrl: "/images/nonexistent-keyboard.png", imageAltText: "A colorful mechanical keyboard (image will fail)" }, // Failing URL
];

const updatedTestData = [
  { productName: "Laptop Pro X (Updated)", price: "1450.00", imageUrl: "/placeholder-images/laptop_updated.jpg", imageAltText: "An updated modern laptop" },
  { productName: "Wireless Ergo Mouse", price: "75.00", imageUrl: "https://example.com/another-nonexistent-mouse.jpg", imageAltText: "An ergonomic wireless mouse (image will fail again)" }, // Failing URL
  { productName: "Mechanical Keyboard RGB", price: "120.00", imageUrl: "/placeholder-images/keyboard.jpg", imageAltText: "A colorful mechanical keyboard" },
  { productName: "New Gaming Monitor", price: "350.00", imageUrl: "/images/nonexistent-monitor.gif", imageAltText: "A new gaming monitor (image will fail)" }, // Failing URL
];

// Mock theme and projectPrd for the provider
const mockTheme = {
  primary: 'blue-500',
  secondary: 'green-500',
  background: 'gray-100',
  text: 'gray-800',
  border: 'gray-300',
};

const mockProjectPrd = "This is a test project PRD for dynamic MagicUI components. The goal is to create reusable cards for products.";

export default function DynamicMagicUITestPage() {
  const [testData, setTestData] = useState(initialTestData);

  const handleUpdateData = () => {
    setTestData(updatedTestData);
  };

  const handleResetData = () => {
    setTestData(initialTestData);
  };

  // Expected: The 'productCardTest' structure should be generated by AI only once
  // due to the shared 'id' prop. The AI should use placeholders like {{productName}}.
  // Expected: Each card should display its respective product name, price, and image
  // by filling the placeholders with the 'data' prop.
  // Expected: If data changes (e.g., by clicking the update button), the cards
  // should re-render and update their content accordingly, without needing to
  // re-fetch the structural component from the AI.

  return (
    <MagicUIProvider theme={mockTheme} projectPrd={mockProjectPrd} apiKey="test-api-key">
      <div className="container mx-auto p-8">
        <header className="mb-8">
          <h1 className="text-3xl font-bold mb-2">Dynamic MagicUI Test Page</h1>
          <p className="text-gray-600">
            This page tests the MagicUI component's ability to use a single AI-generated
            structure (identified by a shared 'id') and render multiple instances
            with different data, updating dynamically when the data changes.
          </p>
        </header>

        <div className="mb-6">
          <button
            onClick={handleUpdateData}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
          >
            Update Test Data
          </button>
          <button
            onClick={handleResetData}
            className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
          >
            Reset Test Data
          </button>
        </div>

        <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {testData.map((item, index) => (
            <div key={index} className="border p-4 rounded-lg shadow-lg bg-white">
              <h3 className="text-lg font-semibold mb-3">Instance {index + 1} (Shared ID: product-card-dynamic)</h3>
              <MagicUI
                // React key for list rendering
                key={`magic-product-${index}`}
                // Shared ID: This tells MagicUI to fetch the structure once for "product-card-dynamic"
                // and then reuse it for all instances, filling placeholders with the 'data' prop.
                id="product-card-dynamic"
                moduleName="ProductCardDynamic"
                description="A card that displays product information: Name: {{productName}}, Price: ${{price}}. The image at {{imageUrl}} (alt text: {{imageAltText}}) should have a fallback to https://placehold.co/300x200 if the original image fails to load. Ensure the onerror attribute is correctly implemented for this fallback."
                // Individual data for this instance
                data={item}
                className="w-full"
              />
            </div>
          ))}
        </section>

        <footer className="mt-12 pt-6 border-t">
          <h2 className="text-xl font-semibold mb-3">Expected Behavior:</h2>
          <ul className="list-disc list-inside space-y-1 text-gray-700">
            <li>
              The 'ProductCardDynamic' structure (HTML with placeholders like <code>{"{{productName}}"}</code>)
              should be generated by the AI only ONCE for the first component instance that uses
              the <code>id="product-card-dynamic"</code>.
            </li>
            <li>
              All subsequent components with the same <code>id</code> should reuse this cached structure.
            </li>
            <li>
              Each rendered card should display its unique product name, price, and image by correctly
              populating the placeholders from its respective <code>data</code> prop.
            </li>
            <li>
              When the "Update Test Data" button is clicked, the cards should dynamically update
              their content to reflect the new data objects. This update should happen client-side
              without re-fetching the structural component from the AI.
            </li>
             <li>
              The AI should have received the description, including the placeholder examples, and generated
              an HTML structure that uses these exact placeholders (e.g., <code>{"<h2>{{productName}}</h2>"}</code>,
              <code>{"<p>Price: ${{price}}</p>"}</code>, <code>{"<img src='{{imageUrl}}' alt='{{imageAltText}}' />"}</code>).
            </li>
          </ul>
        </footer>
      </div>
    </MagicUIProvider>
  );
}
